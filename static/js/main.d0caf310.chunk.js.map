{"version":3,"sources":["TodoItem.js","TodoList.js","NewTodo.js","App.js","index.js"],"names":["TodoItem","this","props","deleteTodo","todo","changeStatus","key","id","className","type","checked","completed","onChange","classNames","activeTodo","htmlFor","title","onClick","React","PureComponent","TodoList","todos","selectAllTodo","map","NewTodo","state","length","inputError","handleSubmit","event","addTodo","preventDefault","setState","trim","prevState","onTitleChange","target","value","onSubmit","placeholder","Component","test","TodoApp","filter","onButtonAllSelect","onButtonActiveSelect","onButtonCompletedSelect","onSelectAllTodos","newTodo","removeTodoId","findIndex","item","remainingTodos","splice","clearCompleted","filterViewAll","filterActive","filterCompleted","preparedTodos","notComplitedTodo","activeClear","href","selected","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.d0caf310.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends React.PureComponent {\n  render() {\n    const { deleteTodo, todo, changeStatus } = this.props;\n\n    return (\n\n      <>\n        <li key={todo.id}>\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              id={todo.id}\n              checked={todo.completed}\n              onChange={() => changeStatus(todo.id)\n              }\n            />\n            <label\n              className={classNames({ activeTodo: todo.completed })}\n              htmlFor=\"todo\"\n            >\n              {todo.title}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              id={todo.id}\n              onClick={deleteTodo}\n            />\n          </div>\n          <input\n            type=\"text\"\n            className=\"edit\"\n          />\n        </li>\n      </>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nclass TodoList extends React.PureComponent {\n  render() {\n    const { todos, changeStatus, deleteTodo, selectAllTodo } = this.props;\n\n    return (\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={selectAllTodo}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <ul className=\"todo-list\">\n          {todos.map(todo => (\n            <TodoItem\n              todo={todo}\n              key={todo.id}\n              changeStatus={changeStatus}\n              deleteTodo={deleteTodo}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  })).isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  selectAllTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends React.Component {\n  state = {\n    title: '',\n    id: this.props.length,\n    inputError: false,\n  }\n\n  handleSubmit = (event) => {\n    const { title, id } = this.state;\n    const { addTodo } = this.props;\n\n    event.preventDefault();\n\n    if (title.length === 0) {\n      this.setState({\n        inputError: true,\n      });\n    } else {\n      addTodo({\n        id: id + 1,\n        title: title.trim(),\n        completed: false,\n      });\n      this.setState(prevState => ({\n        title: '',\n        id: prevState.id + 1,\n        inputError: false,\n      }));\n    }\n  }\n\n  onTitleChange = (event) => {\n    this.setState({\n      title: event.target.value,\n    });\n  }\n\n  render() {\n    const { inputError, title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          value={title}\n          onChange={this.onTitleChange}\n          className={classNames('new-todo', { inputError })}\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  length: PropTypes.number.isRequired,\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default NewTodo;\n","import React from 'react';\nimport classNames from 'classnames';\nimport TodoList from './TodoList';\nimport NewTodo from './NewTodo';\n\nconst test = [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: false,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n  },\n];\n\nclass TodoApp extends React.Component {\n  state = {\n    todos: test,\n    filter: 'all',\n    onButtonAllSelect: false,\n    onButtonActiveSelect: false,\n    onButtonCompletedSelect: false,\n    onSelectAllTodos: true,\n  }\n\n  addTodo = (newTodo) => {\n    this.setState(prevState => ({ todos: [...prevState.todos, newTodo] }));\n  }\n\n  changeStatus = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  deleteTodo = (event) => {\n    const removeTodoId = this.state.todos\n      .findIndex(item => item.id === +event.target.id);\n\n    this.setState((prevState) => {\n      const remainingTodos = [...prevState.todos];\n\n      remainingTodos.splice(removeTodoId, 1);\n\n      return (\n        { todos: [...remainingTodos] }\n      );\n    });\n  }\n\n  selectAllTodo = () => {\n    this.setState(prevState => ({\n      onSelectAllTodos: !prevState.onSelectAllTodos,\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: prevState.onSelectAllTodos,\n      })),\n    }));\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.completed === false),\n    }));\n  }\n\n  filterViewAll = () => {\n    this.setState({\n      filter: 'all',\n      onButtonAllSelect: true,\n      onButtonActiveSelect: false,\n      onButtonCompletedSelect: false,\n    });\n  }\n\n  filterActive = () => {\n    this.setState({\n      filter: 'active',\n      onButtonAllSelect: false,\n      onButtonActiveSelect: true,\n      onButtonCompletedSelect: false,\n    });\n  }\n\n  filterCompleted = () => {\n    this.setState({\n      filter: 'completed',\n      onButtonAllSelect: false,\n      onButtonActiveSelect: false,\n      onButtonCompletedSelect: true,\n    });\n  }\n\n  render() {\n    const {\n      todos,\n      filter,\n      onButtonAllSelect,\n      onButtonActiveSelect,\n      onButtonCompletedSelect,\n    } = this.state;\n\n    const notComplitedTodo = todos.filter(todo => todo.completed === false);\n    let preparedTodos;\n\n    if (filter === 'all') {\n      preparedTodos = [...todos];\n    }\n\n    if (filter === 'active') {\n      preparedTodos = [...todos].filter(todo => todo.completed === false);\n    }\n\n    if (filter === 'completed') {\n      preparedTodos = [...todos].filter(todo => todo.completed === true);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n        </header>\n        <NewTodo\n          addTodo={this.addTodo}\n          length={todos.length}\n        />\n        <TodoList\n          todos={preparedTodos}\n          changeStatus={this.changeStatus}\n          deleteTodo={this.deleteTodo}\n          selectAllTodo={this.selectAllTodo}\n        />\n\n        <footer\n          className={classNames('footer', { activeClear: todos.length === 0 })}\n        >\n          <span className=\"todo-count\">\n            {notComplitedTodo.length}\n            {' '}\n            items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/\"\n                className={classNames({ selected: onButtonAllSelect })}\n                onClick={this.filterViewAll}\n              >\n                All\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"#/active\"\n                onClick={this.filterActive}\n                className={classNames({ selected: onButtonActiveSelect })}\n              >\n                Active\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"#/completed\"\n                onClick={this.filterCompleted}\n                className={classNames({ selected: onButtonCompletedSelect })}\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n\n          <button\n            type=\"button\"\n            className={classNames('clear-completed',\n              { activeClear: todos.length === notComplitedTodo.length })}\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n\n    );\n  }\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}