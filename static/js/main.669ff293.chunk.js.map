{"version":3,"sources":["TodoItem.js","TodoList.js","NewTodo.js","App.js","index.js"],"names":["TodoItem","state","onEdit","onEditTodoId","id","setState","saveChangeBlur","event","newTitle","target","value","props","changeTitle","onKeyPress","keyCode","visibleContent","this","deleteTodo","todo","changeStatus","className","defaultValue","title","onBlur","onKeyDown","key","type","checked","completed","onChange","classNames","activeTodo","htmlFor","onDoubleClick","onClick","React","Component","TodoList","todos","selectAllTodo","allChecked","every","map","PureComponent","NewTodo","length","inputError","handleSubmit","preventDefault","addTodo","trim","Math","random","prevState","onTitleChange","onSubmit","placeholder","TodoApp","filter","onSelectAllTodos","newTodo","removeTodoId","findIndex","item","remainingTodos","splice","clearCompleted","filterViewAll","filterActive","filterCompleted","initialState","JSON","parse","localStorage","getItem","setItem","stringify","preparedTodos","notComplitedTodo","activeClear","href","selected","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.669ff293.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends React.Component {\nstate = {\n  onEdit: false,\n  onEditTodoId: '',\n}\n\n  onEdit = (id) => {\n    this.setState({\n      onEdit: true,\n      onEditTodoId: +id,\n    });\n  }\n\n  saveChangeBlur = (event) => {\n    const id = this.state.onEditTodoId;\n    const newTitle = event.target.value;\n\n    this.setState({\n      onEdit: false,\n    });\n    this.props.changeTitle(id, newTitle);\n  }\n\n  onKeyPress = (event) => {\n    const id = this.state.onEditTodoId;\n    const newTitle = event.target.value;\n\n    if (event.keyCode === 13) {\n      this.setState({\n        onEdit: false,\n      });\n      this.props.changeTitle(id, newTitle);\n    }\n\n    if (event.keyCode === 27) {\n      this.setState({\n        onEdit: false,\n      });\n    }\n  }\n\n  render() {\n    const { deleteTodo, todo, changeStatus } = this.props;\n    const { onEdit } = this.state;\n    let visibleContent;\n\n    if (!onEdit) {\n      visibleContent = todo.title;\n    } else {\n      visibleContent = (\n        <input\n          className=\"change\"\n          defaultValue={todo.title}\n          onBlur={this.saveChangeBlur}\n          onKeyDown={this.onKeyPress}\n        />\n      );\n    }\n\n    return (\n\n      <>\n        <li key={todo.id}>\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              id={todo.id}\n              checked={todo.completed}\n              onChange={() => changeStatus(todo.id)}\n            />\n            <label\n              className={classNames({ activeTodo: todo.completed })}\n              htmlFor=\"todo\"\n              onDoubleClick={() => this.onEdit(todo.id)}\n            >\n              {visibleContent}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              id={todo.id}\n              onClick={deleteTodo}\n            />\n          </div>\n          <input\n            type=\"text\"\n            className=\"edit\"\n          />\n        </li>\n      </>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nclass TodoList extends React.PureComponent {\n  render() {\n    const {\n      todos,\n      changeStatus,\n      deleteTodo,\n      selectAllTodo,\n      changeTitle,\n    } = this.props;\n    const allChecked = todos.every(todo => todo.completed === true);\n\n    return (\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={selectAllTodo}\n          checked={allChecked}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <ul className=\"todo-list\">\n          {todos.map(todo => (\n            <TodoItem\n              changeTitle={changeTitle}\n              todo={todo}\n              key={todo.id}\n              changeStatus={changeStatus}\n              deleteTodo={deleteTodo}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  })).isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  selectAllTodo: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends React.Component {\n  state = {\n    title: '',\n    id: this.props.length,\n    inputError: false,\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title, id } = this.state;\n    const { addTodo } = this.props;\n\n    if (title.trim() === '') {\n      this.setState({\n        inputError: true,\n      });\n    } else {\n      addTodo({\n        id: id + Math.random() * 100,\n        title: title.trim(),\n        completed: false,\n      });\n      this.setState(prevState => ({\n        title: '',\n        id: prevState.id + 1,\n        inputError: false,\n      }));\n    }\n  }\n\n  onTitleChange = (event) => {\n    if (event.target.value.trim() !== '') {\n      this.setState({\n        title: event.target.value,\n        inputError: false,\n      });\n    } else {\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  render() {\n    const { inputError, title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          value={title}\n          onChange={this.onTitleChange}\n          className={classNames('new-todo', { inputError })}\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  length: PropTypes.number.isRequired,\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default NewTodo;\n","import React from 'react';\nimport classNames from 'classnames';\nimport TodoList from './TodoList';\nimport NewTodo from './NewTodo';\n\nclass TodoApp extends React.Component {\n  state = {\n    todos: [],\n    filter: 'all',\n    onSelectAllTodos: true,\n  }\n\n  componentDidMount() {\n    const initialState = JSON.parse(localStorage.getItem('TODOs'));\n\n    this.setState({\n      ...initialState,\n    });\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('TODOs', JSON.stringify(this.state));\n  }\n\n  addTodo = (newTodo) => {\n    this.setState(prevState => ({ todos: [...prevState.todos, newTodo] }));\n  }\n\n  changeStatus = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  changeTitle = (id, newTitle) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            title: newTitle,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  deleteTodo = (event) => {\n    const removeTodoId = this.state.todos\n      .findIndex(item => item.id === +event.target.id);\n\n    this.setState((prevState) => {\n      const remainingTodos = [...prevState.todos];\n\n      remainingTodos.splice(removeTodoId, 1);\n\n      return (\n        { todos: [...remainingTodos] }\n      );\n    });\n  }\n\n  selectAllTodo = () => {\n    this.setState(prevState => ({\n      onSelectAllTodos: !prevState.onSelectAllTodos,\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: prevState.onSelectAllTodos,\n      })),\n    }));\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.completed === false),\n    }));\n  }\n\n  filterViewAll = () => {\n    this.setState({\n      filter: 'all',\n    });\n  }\n\n  filterActive = () => {\n    this.setState({\n      filter: 'active',\n    });\n  }\n\n  filterCompleted = () => {\n    this.setState({\n      filter: 'completed',\n    });\n  }\n\n  render() {\n    const {\n      todos,\n      filter,\n    } = this.state;\n\n    const notComplitedTodo = todos.filter(todo => todo.completed === false);\n    let preparedTodos;\n\n    if (filter === 'all') {\n      preparedTodos = [...todos];\n    }\n\n    if (filter === 'active') {\n      preparedTodos = [...todos].filter(todo => todo.completed === false);\n    }\n\n    if (filter === 'completed') {\n      preparedTodos = [...todos].filter(todo => todo.completed === true);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n        </header>\n        <NewTodo\n          addTodo={this.addTodo}\n          length={todos.length}\n        />\n        <TodoList\n          todos={preparedTodos}\n          changeStatus={this.changeStatus}\n          deleteTodo={this.deleteTodo}\n          selectAllTodo={this.selectAllTodo}\n          changeTitle={this.changeTitle}\n        />\n\n        <footer\n          className={classNames('footer', { activeClear: todos.length === 0 })}\n        >\n          <span className=\"todo-count\">\n            {notComplitedTodo.length}\n            {' '}\n            items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/\"\n                className={classNames({ selected: filter === 'all' })}\n                onClick={this.filterViewAll}\n              >\n                All\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"#/active\"\n                onClick={this.filterActive}\n                className={classNames({ selected: filter === 'active' })}\n              >\n                Active\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"#/completed\"\n                onClick={this.filterCompleted}\n                className={classNames({ selected: filter === 'completed' })}\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n\n          <button\n            type=\"button\"\n            className={classNames('clear-completed',\n              { activeClear: todos.length === notComplitedTodo.length })}\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n\n    );\n  }\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}