{"version":3,"sources":["TodoItem.js","TodosProptypes.js","TodoList.js","NewTodo.js","FilterButtons.js","App.js","index.js"],"names":["TodoItem","state","onEdit","onEditTodoId","id","setState","saveChangeBlur","event","newTitle","target","value","props","changeTitle","onKeyPress","keyCode","this","deleteTodo","todo","changeStatus","key","className","classNames","view","editing","completed","type","checked","onChange","htmlFor","onDoubleClick","title","onClick","defaultValue","onBlur","onKeyDown","autoFocus","React","Component","PropTypes","arrayOf","shape","string","isRequired","bool","number","TodoList","allChecked","todos","selectAllTodo","initialTodos","length","every","map","defaultProps","NewTodo","inputError","handleSubmit","preventDefault","addTodo","trim","Math","random","prevState","onTitleChange","onSubmit","placeholder","FilterButtons","filter","todosFilter","href","selected","FILTERS","TodoApp","onSelectAllTodos","newTodo","removeTodoId","findIndex","remainingTodos","splice","clearCompleted","item","initialState","JSON","parse","localStorage","getItem","setItem","stringify","preparedTodos","notComplitedTodo","active","activeClear","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.dcc8d0c8.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends React.Component {\nstate = {\n  onEdit: false,\n  onEditTodoId: '',\n}\n\n  onEdit = (id) => {\n    this.setState({\n      onEdit: true,\n      onEditTodoId: +id,\n    });\n  }\n\n  saveChangeBlur = (event) => {\n    const id = this.state.onEditTodoId;\n    const newTitle = event.target.value;\n\n    this.setState({\n      onEdit: false,\n    });\n    this.props.changeTitle(id, newTitle);\n  }\n\n  onKeyPress = (event) => {\n    const id = this.state.onEditTodoId;\n    const newTitle = event.target.value;\n\n    if (event.keyCode === 13) {\n      this.setState({\n        onEdit: false,\n      });\n      this.props.changeTitle(id, newTitle);\n    }\n\n    if (event.keyCode === 27) {\n      this.setState({\n        onEdit: false,\n      });\n    }\n  }\n\n  render() {\n    const { deleteTodo, todo, changeStatus } = this.props;\n    const { onEdit } = this.state;\n\n    return (\n\n      <>\n        <li\n          key={todo.id}\n          className={classNames({\n            view: true,\n            editing: onEdit,\n            completed: todo.completed,\n          })}\n        >\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              id={todo.id}\n              checked={todo.completed}\n              onChange={() => changeStatus(todo.id)}\n            />\n            <label\n              htmlFor=\"todo\"\n              onDoubleClick={() => this.onEdit(todo.id)}\n            >\n              {todo.title}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              id={todo.id}\n              onClick={deleteTodo}\n            />\n          </div>\n          {onEdit && (\n            <input\n              type=\"text\"\n              className=\"edit\"\n              defaultValue={todo.title}\n              onBlur={this.saveChangeBlur}\n              onKeyDown={this.onKeyPress}\n              autoFocus\n            />\n          )}\n        </li>\n      </>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import PropTypes from 'prop-types';\n\nconst TodosProptypes\n  = PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  })).isRequired;\n\nexport default TodosProptypes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\nimport TodosProptypes from './TodosProptypes';\n\nfunction TodoList({\n  todos,\n  changeStatus,\n  deleteTodo,\n  selectAllTodo,\n  changeTitle,\n  initialTodos,\n}) {\n  let allChecked;\n\n  if (initialTodos.length === 0) {\n    allChecked = false;\n  } else {\n    allChecked = initialTodos.every(todo => todo.completed === true);\n  }\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onChange={selectAllTodo}\n        checked={allChecked}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <TodoItem\n            changeTitle={changeTitle}\n            todo={todo}\n            key={todo.id}\n            changeStatus={changeStatus}\n            deleteTodo={deleteTodo}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nTodoList.propTypes = {\n  todos: TodosProptypes,\n  initialTodos: TodosProptypes,\n  changeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  selectAllTodo: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n  initialTodos: [],\n};\n\nexport default TodoList;\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends React.Component {\n  state = {\n    title: '',\n    id: this.props.length,\n    inputError: false,\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title, id } = this.state;\n    const { addTodo } = this.props;\n\n    if (title.trim() === '') {\n      this.setState({\n        inputError: true,\n      });\n    } else {\n      addTodo({\n        id: id + Math.random() * 100,\n        title: title.trim(),\n        completed: false,\n      });\n\n      this.setState(prevState => ({\n        title: '',\n        id: prevState.id + 1,\n        inputError: false,\n      }));\n    }\n  }\n\n  onTitleChange = (event) => {\n    if (event.target.value.trim() !== '') {\n      this.setState({\n        title: event.target.value,\n        inputError: false,\n      });\n    } else {\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  render() {\n    const { inputError, title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          value={title}\n          onChange={this.onTitleChange}\n          className={classNames('new-todo', { inputError })}\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  length: PropTypes.number.isRequired,\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default NewTodo;\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nfunction FilterButtons({ filter, todosFilter }) {\n  return (\n    <ul className=\"filters\">\n\n      <li>\n        <a\n          href=\"#/\"\n          id=\"all\"\n          className={classNames({ selected: filter === 'all' })}\n          onClick={todosFilter}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          id=\"active\"\n          onClick={todosFilter}\n          className={classNames({ selected: filter === 'active' })}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          id=\"completed\"\n          onClick={todosFilter}\n          className={classNames({ selected: filter === 'completed' })}\n        >\n          Completed\n        </a>\n      </li>\n\n    </ul>\n  );\n}\n\nFilterButtons.propTypes = {\n  filter: PropTypes.string.isRequired,\n  todosFilter: PropTypes.func.isRequired,\n};\n\nexport default FilterButtons;\n","import React from 'react';\nimport classNames from 'classnames';\nimport TodoList from './TodoList';\nimport NewTodo from './NewTodo';\nimport FilterButtons from './FilterButtons';\n\nconst FILTERS = {\n  all: 'all',\n  completed: 'completed',\n  active: 'active',\n};\n\nclass TodoApp extends React.Component {\n  state = {\n    todos: [],\n    filter: 'all',\n    onSelectAllTodos: true,\n  }\n\n  componentDidMount() {\n    const initialState = JSON.parse(localStorage.getItem('TODOs'));\n\n    this.setState({\n      ...initialState,\n    });\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('TODOs', JSON.stringify(this.state));\n  }\n\n  addTodo = (newTodo) => {\n    this.setState(prevState => ({ todos: [...prevState.todos, newTodo] }));\n  }\n\n  changeStatus = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  changeTitle = (id, newTitle) => {\n    if (newTitle.trim() !== '') {\n      this.setState(prevState => ({\n        todos: prevState.todos.map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              title: newTitle,\n            };\n          }\n\n          return todo;\n        }),\n      }));\n    } else {\n      const removeTodoId = this.state.todos\n        .findIndex(todo => todo.id === id);\n\n      this.setState((prevState) => {\n        const remainingTodos = [...prevState.todos];\n\n        remainingTodos.splice(removeTodoId, 1);\n\n        return (\n          { todos: [...remainingTodos] }\n        );\n      });\n    }\n  }\n\n  selectAllTodo = () => {\n    this.setState(prevState => ({\n      onSelectAllTodos: !prevState.onSelectAllTodos,\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: prevState.onSelectAllTodos,\n      })),\n    }));\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.completed === false),\n    }));\n  }\n\n  todosFilter = (event) => {\n    this.setState({\n      filter: event.target.id,\n    });\n  }\n\n  deleteTodo = (event) => {\n    const removeTodoId = this.state.todos\n      .findIndex(item => item.id === +event.target.id);\n\n    this.setState((prevState) => {\n      const remainingTodos = [...prevState.todos];\n\n      remainingTodos.splice(removeTodoId, 1);\n\n      return (\n        { todos: [...remainingTodos] }\n      );\n    });\n  }\n\n  render() {\n    const {\n      todos,\n      filter,\n    } = this.state;\n\n    const notComplitedTodo = todos.filter(todo => todo.completed === false);\n    const { all, completed, active } = FILTERS;\n\n    let preparedTodos;\n\n    if (filter === all) {\n      preparedTodos = [...todos];\n    }\n\n    if (filter === active) {\n      preparedTodos = [...todos].filter(todo => !todo.completed);\n    }\n\n    if (filter === completed) {\n      preparedTodos = [...todos].filter(todo => todo.completed);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n        </header>\n        <NewTodo\n          addTodo={this.addTodo}\n          length={todos.length}\n        />\n        <TodoList\n          todos={preparedTodos}\n          initialTodos={todos}\n          changeStatus={this.changeStatus}\n          deleteTodo={this.deleteTodo}\n          selectAllTodo={this.selectAllTodo}\n          changeTitle={this.changeTitle}\n        />\n\n        <footer\n          className={classNames('footer', { activeClear: todos.length === 0 })}\n        >\n          <span className=\"todo-count\">\n            {notComplitedTodo.length}\n            {' '}\n            items left\n          </span>\n\n          <FilterButtons todosFilter={this.todosFilter} filter={filter} />\n\n          <button\n            type=\"button\"\n            className={classNames('clear-completed',\n              { activeClear: todos.length === notComplitedTodo.length })}\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n\n        </footer>\n      </section>\n\n    );\n  }\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}