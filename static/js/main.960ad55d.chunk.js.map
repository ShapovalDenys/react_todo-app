{"version":3,"sources":["TodoItem.js","TodoList.js","NewTodo.js","App.js","index.js"],"names":["TodoItem","this","props","deleteTodo","todo","changeStatus","key","id","className","type","checked","completed","onChange","classNames","activeTodo","htmlFor","title","onClick","React","PureComponent","TodoList","todos","selectAllTodo","allChecked","every","map","NewTodo","state","length","inputError","handleSubmit","event","preventDefault","addTodo","trim","setState","prevState","onTitleChange","target","value","onSubmit","placeholder","Component","TodoApp","filter","onSelectAllTodos","newTodo","removeTodoId","findIndex","item","remainingTodos","splice","clearCompleted","filterViewAll","filterActive","filterCompleted","preparedTodos","notComplitedTodo","activeClear","href","selected","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.960ad55d.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends React.PureComponent {\n  render() {\n    const { deleteTodo, todo, changeStatus } = this.props;\n\n    return (\n\n      <>\n        <li key={todo.id}>\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              id={todo.id}\n              checked={todo.completed}\n              onChange={() => changeStatus(todo.id)\n              }\n            />\n            <label\n              className={classNames({ activeTodo: todo.completed })}\n              htmlFor=\"todo\"\n            >\n              {todo.title}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              id={todo.id}\n              onClick={deleteTodo}\n            />\n          </div>\n          <input\n            type=\"text\"\n            className=\"edit\"\n          />\n        </li>\n      </>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nclass TodoList extends React.PureComponent {\n  render() {\n    const { todos, changeStatus, deleteTodo, selectAllTodo } = this.props;\n    const allChecked = todos.every(todo => todo.completed === true);\n\n    return (\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={selectAllTodo}\n          checked={allChecked}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <ul className=\"todo-list\">\n          {todos.map(todo => (\n            <TodoItem\n              todo={todo}\n              key={todo.id}\n              changeStatus={changeStatus}\n              deleteTodo={deleteTodo}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  })).isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  selectAllTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends React.Component {\n  state = {\n    title: '',\n    id: this.props.length,\n    inputError: false,\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title, id } = this.state;\n    const { addTodo } = this.props;\n\n    if (title.trim() === '') {\n      this.setState({\n        inputError: true,\n      });\n    } else {\n      addTodo({\n        id: id + 1,\n        title: title.trim(),\n        completed: false,\n      });\n      this.setState(prevState => ({\n        title: '',\n        id: prevState.id + 1,\n        inputError: false,\n      }));\n    }\n  }\n\n  onTitleChange = (event) => {\n    if (event.target.value.trim() !== '') {\n      this.setState({\n        title: event.target.value,\n        inputError: false,\n      });\n    } else {\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  render() {\n    const { inputError, title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          value={title}\n          onChange={this.onTitleChange}\n          className={classNames('new-todo', { inputError })}\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  length: PropTypes.number.isRequired,\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default NewTodo;\n","import React from 'react';\nimport classNames from 'classnames';\nimport TodoList from './TodoList';\nimport NewTodo from './NewTodo';\n\nclass TodoApp extends React.Component {\n  state = {\n    todos: [],\n    filter: 'all',\n    onSelectAllTodos: true,\n  }\n\n  addTodo = (newTodo) => {\n    this.setState(prevState => ({ todos: [...prevState.todos, newTodo] }));\n  }\n\n  changeStatus = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  deleteTodo = (event) => {\n    const removeTodoId = this.state.todos\n      .findIndex(item => item.id === +event.target.id);\n\n    this.setState((prevState) => {\n      const remainingTodos = [...prevState.todos];\n\n      remainingTodos.splice(removeTodoId, 1);\n\n      return (\n        { todos: [...remainingTodos] }\n      );\n    });\n  }\n\n  selectAllTodo = () => {\n    this.setState(prevState => ({\n      onSelectAllTodos: !prevState.onSelectAllTodos,\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: prevState.onSelectAllTodos,\n      })),\n    }));\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.completed === false),\n    }));\n  }\n\n  filterViewAll = () => {\n    this.setState({\n      filter: 'all',\n    });\n  }\n\n  filterActive = () => {\n    this.setState({\n      filter: 'active',\n    });\n  }\n\n  filterCompleted = () => {\n    this.setState({\n      filter: 'completed',\n    });\n  }\n\n  render() {\n    const {\n      todos,\n      filter,\n    } = this.state;\n\n    const notComplitedTodo = todos.filter(todo => todo.completed === false);\n    let preparedTodos;\n\n    if (filter === 'all') {\n      preparedTodos = [...todos];\n    }\n\n    if (filter === 'active') {\n      preparedTodos = [...todos].filter(todo => todo.completed === false);\n    }\n\n    if (filter === 'completed') {\n      preparedTodos = [...todos].filter(todo => todo.completed === true);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n        </header>\n        <NewTodo\n          addTodo={this.addTodo}\n          length={todos.length}\n        />\n        <TodoList\n          todos={preparedTodos}\n          changeStatus={this.changeStatus}\n          deleteTodo={this.deleteTodo}\n          selectAllTodo={this.selectAllTodo}\n        />\n\n        <footer\n          className={classNames('footer', { activeClear: todos.length === 0 })}\n        >\n          <span className=\"todo-count\">\n            {notComplitedTodo.length}\n            {' '}\n            items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/\"\n                className={classNames({ selected: filter === 'all' })}\n                onClick={this.filterViewAll}\n              >\n                All\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"#/active\"\n                onClick={this.filterActive}\n                className={classNames({ selected: filter === 'active' })}\n              >\n                Active\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"#/completed\"\n                onClick={this.filterCompleted}\n                className={classNames({ selected: filter === 'completed' })}\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n\n          <button\n            type=\"button\"\n            className={classNames('clear-completed',\n              { activeClear: todos.length === notComplitedTodo.length })}\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n\n    );\n  }\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}